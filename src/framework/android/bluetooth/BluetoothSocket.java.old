 // Failed to get sources. Instead, stub sources have been generated by the disassembler.
 // Implementation of methods is unavailable.
package android.bluetooth;

import java.io.FileDescriptor;
import java.io.IOException;
import java.net.Socket;
import java.util.Arrays;

import com.zbt.networking.BluetoothResponse;

import android.net.LocalSocket;
import android.os.ParcelFileDescriptor;
import android.util.Log;

public final class BluetoothSocket implements java.io.Closeable {

    static final int BTSOCK_FLAG_NO_SDP = 4;

    //    private static final boolean DBG;

    static final int EADDRINUSE = 98;

    static final int EBADFD = 77;

    static final int MAX_L2CAP_PACKAGE_SIZE = 65535;

    public static final int MAX_RFCOMM_CHANNEL = 30;

    private static final int PROXY_CONNECTION_TIMEOUT = 5000;

    static final int SEC_FLAG_AUTH = 2;

    static final int SEC_FLAG_AUTH_16_DIGIT = 16;

    static final int SEC_FLAG_AUTH_MITM = 8;

    static final int SEC_FLAG_ENCRYPT = 1;

    private static final int SOCK_SIGNAL_SIZE = 20;

    private static final java.lang.String TAG = "BluetoothSocket";

    public static final int TYPE_L2CAP = 3;

    public static final int TYPE_L2CAP_BREDR = 3;

    public static final int TYPE_L2CAP_LE = 4;

    public static final int TYPE_RFCOMM = 1;

    public static final int TYPE_SCO = 2;

    //    private static final boolean VDBG;

    private java.lang.String mAddress;

    private final boolean mAuth;

    private boolean mAuthMitm;

    private android.bluetooth.BluetoothDevice mDevice;

    private final boolean mEncrypt;

    private boolean mExcludeSdp;

    private int mFd;

    private final android.bluetooth.BluetoothInputStream mInputStream;

    private java.nio.ByteBuffer mL2capBuffer;

    private int mMaxRxPacketSize;

    private int mMaxTxPacketSize;

    private boolean mMin16DigitPin;

    private final android.bluetooth.BluetoothOutputStream mOutputStream;

    private android.os.ParcelFileDescriptor mPfd;

    private int mPort;

    private java.lang.String mServiceName;

    private android.net.LocalSocket mSocket;

    private java.io.InputStream mSocketIS;

    private java.io.OutputStream mSocketOS;

    private volatile SocketState mSocketState;

    private final int mType;

    private final android.os.ParcelUuid mUuid;

    static {} {
    }

    private enum SocketState {
        INIT,
        CONNECTED,
        LISTENING,
        CLOSED,
    }


    BluetoothSocket(int type, int fd, boolean auth, boolean encrypt, android.bluetooth.BluetoothDevice device, int port, android.os.ParcelUuid uuid) throws IOException {
        this(type, fd, auth, encrypt, device, port, uuid, false, false);
    }

    BluetoothSocket(int type, int fd, boolean auth, boolean encrypt, android.bluetooth.BluetoothDevice device, int port, android.os.ParcelUuid uuid, boolean mitm, boolean min16DigitPin) throws java.io.IOException {
        if (type == BluetoothSocket.TYPE_RFCOMM && uuid == null && fd == -1
                && port != BluetoothAdapter.SOCKET_CHANNEL_AUTO_STATIC_NO_SDP) {
            if (port < 1 || port > MAX_RFCOMM_CHANNEL) {
                throw new IOException("Invalid RFCOMM channel: " + port);
            }
        }
        if (uuid != null) {
            mUuid = uuid;
        } else {
            mUuid = new android.os.ParcelUuid(new java.util.UUID(0, 0));
        }
        mType = type;
        mAuth = auth;
        mAuthMitm = mitm;
        mMin16DigitPin = min16DigitPin;
        mEncrypt = encrypt;
        mDevice = device;
        mPort = port;
        mFd = fd;

        mSocketState = SocketState.INIT;

        if (device == null) {
            // Server socket
            mAddress = BluetoothAdapter.getDefaultAdapter().getAddress();
        } else {
            // Remote socket
            mAddress = device.getAddress();
        }
        mInputStream = new BluetoothInputStream(this);
        mOutputStream = new BluetoothOutputStream(this);

    }

    private BluetoothSocket(int type, int fd, boolean auth, boolean encrypt, java.lang.String address, int port) throws java.io.IOException {
        this(type, fd, auth, encrypt, new BluetoothDevice(address), port, null, false, false);
    }

    private BluetoothSocket(BluetoothSocket s) {
        // if (VDBG) Log.d(TAG, "Creating new Private BluetoothSocket of type: " + s.mType);
        mUuid = s.mUuid;
        mType = s.mType;
        mAuth = s.mAuth;
        mEncrypt = s.mEncrypt;
        mPort = s.mPort;
        mInputStream = new BluetoothInputStream(this);
        mOutputStream = new BluetoothOutputStream(this);
        mMaxRxPacketSize = s.mMaxRxPacketSize;
        mMaxTxPacketSize = s.mMaxTxPacketSize;

        mServiceName = s.mServiceName;
        mExcludeSdp = s.mExcludeSdp;
        mAuthMitm = s.mAuthMitm;
        mMin16DigitPin = s.mMin16DigitPin;

    }

    private android.bluetooth.BluetoothSocket acceptSocket(java.lang.String remoteAddr) throws java.io.IOException {
        BluetoothSocket as = new BluetoothSocket(this);
        as.mSocketState = SocketState.CONNECTED;
        FileDescriptor[] fds = mSocket.getAncillaryFileDescriptors();
        // if (DBG) Log.d(TAG, "socket fd passed by stack fds: " + Arrays.toString(fds));
        if (fds == null || fds.length != 1) {
            Log.e(TAG, "socket fd passed from stack failed, fds: " + Arrays.toString(fds));
            as.close();
            throw new IOException("bt socket acept failed");
        }

        as.mPfd = new ParcelFileDescriptor(fds[0]);
        as.mSocket = LocalSocket.createConnectedLocalSocket(fds[0]);
        as.mSocketIS = as.mSocket.getInputStream();
        as.mSocketOS = as.mSocket.getOutputStream();
        as.mAddress = remoteAddr;
        as.mDevice = BluetoothAdapter.getDefaultAdapter().getRemoteDevice(remoteAddr);
        return as;
    }

    // private void sendToWindows(BluetoothDeviceMessage message){
    //     String bluetoothServiceAddress = mDevice.

    //     ForwarderReceiver receiver = new ForwarderReceiver();
    //     IntentFilter filter = new IntentFilter("com.zbt.SEND_TO_FRAMEWORK");
    //     this.registerReceiver(receiver, filter);
    //     UpdateableThread<String> t = new UpdateableThread<String>(){
    //         @Override
    //         public void run(){
    //             try {
    //                 Log.e("MODIFYORWARDER", "retreiving address");

    //                 // String bluetoothServiceAddress = this.getResult();
    //                 Log.e("MODIFYORWARDER", "address received " + bluetoothServiceAddress);

    //                 Log.e("MODIFYORWARDER", "thread started");
    //                 Socket clientSocket = new Socket(bluetoothServiceAddress, 5057);

    //                 Log.e("MODIFYORWARDER", "connecting to " + bluetoothServiceAddress);
    //                 ObjectOutputStream outToWindows = new ObjectOutputStream(clientSocket.getOutputStream());
    //                 ObjectInputStream inFromWindows = new ObjectInputStream(clientSocket.getInputStream());

    //                 try {
    //                     Log.e("MODIFYORWARDER", "writing object");
    //                     outToWindows.writeObject(message);
    //                     outToWindows.flush();
    //                     Log.e("MODIFYORWARDER", "wrote object");
    //                     BluetoothResponse response = (BluetoothResponse) inFromWindows.readObject();
                        
    //                     Log.e("MODIFYORWARDER", "read response");
    //                     Map<String, String> pairedDevices = response.getPairedDevices();
    //                     pairedDevices.forEach((address, name) -> {
    //                         DeviceProperties deviceProperties = mRemoteDevices.addDeviceProperties(Utils.addressToBytes(address), name);
    //                         mRemoteDevices.deviceFoundCallback(Utils.addressToBytes(address));
                            
    //                         mAdapterProperties.onBondStateChanged(deviceProperties.getDevice(), BluetoothDevice.BOND_BONDED);
    //                     });
    //                 } catch (IOException e) {
    //                     // TODO Auto-generated catch block
    //                     e.printStackTrace();
    //                 } catch (ClassNotFoundException e) {
    //                     // TODO Auto-generated catch block
    //                     e.printStackTrace();
    //                 }
    //                 clientSocket.close();
    //             } catch (Exception e){
    //                 e.printStackTrace();
    //             }
    //         }
    //     };
    //     Log.e("MODIFYANDROIDSYSTEM", "starting windows thread");
    //     // ForwarderService fs = new ForwarderService();
    //     // fs.registerForAction(contextForWifi, t);

    //     t.start();
    //     Log.e("MODIFYANDROIDSYSTEM", "returning");
    // }

    private java.lang.String convertAddr(byte[] arg0) {
    return null;
    }

    private void createL2capRxBuffer() {
    }

    private int fillL2capRxBuffer() throws java.io.IOException {
    return 0;
    }

    private int getSecurityFlags() {
    return 0;
    }

    private int readAll(java.io.InputStream arg0, byte[] arg1) throws java.io.IOException {
    return 0;
    }

    private int readInt(java.io.InputStream arg0) throws java.io.IOException {
    return 0;
    }

    private java.lang.String waitSocketSignal(java.io.InputStream arg0) throws java.io.IOException {
    return null;
    }

    android.bluetooth.BluetoothSocket accept(int arg0) throws java.io.IOException {
    return null;
    }

    int available() throws java.io.IOException {
    return 0;
    }

    int bindListen() {
    return 0;
    }

    public void close() throws java.io.IOException {
    }

    public void connect() throws java.io.IOException {
    }

    protected void finalize() throws java.lang.Throwable {
    }

    public int getConnectionType() {
    return 0;
    }

    public java.io.InputStream getInputStream() throws java.io.IOException {
    return null;
    }

    public int getMaxReceivePacketSize() {
    return 0;
    }

    public int getMaxTransmitPacketSize() {
    return 0;
    }

    public java.io.OutputStream getOutputStream() throws java.io.IOException {
    return null;
    }

    int getPort() {
    return 0;
    }

    public android.bluetooth.BluetoothDevice getRemoteDevice() {
    return null;
    }

    public boolean isConnected() {
    return false;
    }

    int read(byte[] arg0, int arg1, int arg2) throws java.io.IOException {
    return 0;
    }

    void removeChannel() {
    }

    public void requestMaximumTxDataLength() throws java.io.IOException {
    }

    public void setExcludeSdp(boolean arg0) {
    }

    void setServiceName(java.lang.String arg0) {
    }

    int write(byte[] arg0, int arg1, int arg2) throws java.io.IOException {
    return 0;
    }
}